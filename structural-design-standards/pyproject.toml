[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "structural-design-standards"
version = "1.0.0"
description = "Comprehensive library for international structural design standards"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Structural Design Standards Team", email = "dev@structural-standards.org"},
]
maintainers = [
    {name = "Structural Design Standards Team", email = "dev@structural-standards.org"},
]
keywords = [
    "structural-engineering", 
    "concrete-design", 
    "steel-design", 
    "aci-318", 
    "thai-standards", 
    "building-codes",
    "engineering-software",
    "structural-analysis"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Engineering",
    "Topic :: Scientific/Engineering :: Engineering",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Natural Language :: Thai",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "pydantic>=1.8.0",
    "typing-extensions>=4.0.0; python_version<'3.10'",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "pytest-xdist>=2.0",
    "black>=22.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "isort>=5.0",
    "pre-commit>=2.15.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.17",
    "sphinx-autodoc-typehints>=1.12",
    "nbsphinx>=0.8",
]
testing = [
    "pytest>=6.0",
    "pytest-cov>=3.0",
    "pytest-xdist>=2.0",
    "pytest-mock>=3.6",
    "hypothesis>=6.0",
]
performance = [
    "numba>=0.55.0",
    "cython>=0.29.0",
]
visualization = [
    "matplotlib>=3.3.0",
    "plotly>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/structural-design-standards"
Documentation = "https://structural-design-standards.readthedocs.io/"
Repository = "https://github.com/your-org/structural-design-standards"
"Bug Tracker" = "https://github.com/your-org/structural-design-standards/issues"
Changelog = "https://github.com/your-org/structural-design-standards/blob/main/CHANGELOG.md"

[project.scripts]
structural-standards = "structural_standards.cli:main"

[tool.setuptools]
packages = ["structural_standards"]

[tool.setuptools.package-data]
structural_standards = [
    "data/*.json",
    "locales/*/LC_MESSAGES/*.po",
    "resources/schemas/*.json",
    "py.typed",
]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["structural_standards"]

# mypy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=structural_standards",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "aci: marks tests related to ACI standards",
    "thai: marks tests related to Thai standards",
]

# Coverage configuration
[tool.coverage.run]
source = ["structural_standards"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]