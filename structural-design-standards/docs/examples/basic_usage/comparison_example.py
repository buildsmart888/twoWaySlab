#!/usr/bin/env python3
"""
ACI vs Thai Standards Comparison Example
========================================

This example demonstrates how to compare design results between 
ACI 318M-25 and Thai Ministry Regulation B.E. 2566 standards for 
the same structural element.

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ACI ‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢
"""

import sys
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from structural_standards.aci.aci318m25.materials.concrete import ACI318M25Concrete
from structural_standards.aci.aci318m25.materials.steel import ACI318M25ReinforcementSteel
from structural_standards.aci.aci318m25.load_combinations import ACI318M25LoadCombinations

from structural_standards.thai.materials.concrete import ThaiConcrete
from structural_standards.thai.materials.steel import ThaiSteel
from structural_standards.thai.ministry_2566.load_combinations import ThaiMinistryLoadCombinations
from structural_standards.thai.unit_systems import ThaiUnitConverter


def compare_materials():
    """Compare material properties between ACI and Thai standards"""
    print("üî¨ Material Properties Comparison")
    print("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏™‡∏î‡∏∏")
    print("=" * 60)
    
    # Concrete comparison - similar strength grades
    print("\n1. Concrete Comparison / ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï:")
    print("-" * 40)
    
    # ACI concrete (28 MPa)
    aci_concrete = ACI318M25Concrete(fc_prime=28.0)
    
    # Thai concrete (Fc280 = 28 MPa)
    thai_concrete = ThaiConcrete(grade='Fc280')
    
    converter = ThaiUnitConverter()
    
    print(f"ACI 318M-25:")
    print(f"  f'c = {aci_concrete.fc_prime} MPa")
    print(f"  Ec = {aci_concrete.elastic_modulus():.0f} MPa")
    print(f"  fr = {aci_concrete.modulus_of_rupture():.2f} MPa")
    print(f"  Unit weight = {aci_concrete.unit_weight} kN/m¬≥")
    
    print(f"\nThai Standards:")
    print(f"  f'c = {thai_concrete.fc_prime} MPa ({thai_concrete.fc_ksc:.0f} ksc)")
    print(f"  Ec = {thai_concrete.elastic_modulus():.0f} MPa")
    print(f"  fr = {thai_concrete.modulus_of_rupture():.2f} MPa")
    print(f"  Unit weight = {thai_concrete.unit_weight} kN/m¬≥")
    
    # Steel comparison - similar strength grades
    print("\n2. Steel Comparison / ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏´‡∏•‡πá‡∏Å:")
    print("-" * 40)
    
    # ACI steel (Grade 420)
    aci_steel = ACI318M25ReinforcementSteel(bar_designation='20M', grade='GRADE420')
    
    # Thai steel (SD40 ‚âà 392 MPa, close to Grade 420)
    thai_steel = ThaiSteel(grade='SD40', bar_designation='DB20')
    
    print(f"ACI 318M-25:")
    print(f"  Grade: {aci_steel.grade}")
    print(f"  fy = {aci_steel.fy} MPa")
    print(f"  Bar: {aci_steel.bar_designation}")
    print(f"  Area = {aci_steel.bar_area():.0f} mm¬≤")
    
    print(f"\nThai Standards:")
    print(f"  Grade: {thai_steel.grade}")
    print(f"  fy = {thai_steel.fy} MPa ({thai_steel.fy_ksc:.0f} ksc)")
    print(f"  Bar: {thai_steel.bar_designation}")
    print(f"  Area = {thai_steel.bar_area():.0f} mm¬≤")
    
    # Material comparison summary
    print("\n3. Material Differences / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏™‡∏î‡∏∏:")
    print("-" * 40)
    
    concrete_diff = abs(aci_concrete.elastic_modulus() - thai_concrete.elastic_modulus())
    steel_diff = abs(aci_steel.fy - thai_steel.fy)
    
    print(f"Concrete modulus difference: {concrete_diff:.0f} MPa ({concrete_diff/aci_concrete.elastic_modulus()*100:.1f}%)")
    print(f"Steel strength difference: {steel_diff:.0f} MPa ({steel_diff/aci_steel.fy*100:.1f}%)")
    
    return {
        'aci_concrete': aci_concrete,
        'thai_concrete': thai_concrete,
        'aci_steel': aci_steel,
        'thai_steel': thai_steel
    }


def compare_load_combinations():
    """Compare load combinations between ACI and Thai standards"""
    print("\n\n‚öñÔ∏è Load Combinations Comparison")
    print("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ä‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å")
    print("=" * 60)
    
    # Sample loads
    dead_load = 5.0  # kN/m¬≤
    live_load = 3.0  # kN/m¬≤
    wind_load = 1.5  # kN/m¬≤
    
    print(f"Sample loads:")
    print(f"  Dead load = {dead_load} kN/m¬≤")
    print(f"  Live load = {live_load} kN/m¬≤")
    print(f"  Wind load = {wind_load} kN/m¬≤")
    
    # ACI Load Combinations
    print("\n1. ACI 318M-25 Load Combinations:")
    print("-" * 40)
    
    aci_loads = ACI318M25LoadCombinations()
    aci_combinations = aci_loads.get_ultimate_combinations()[:4]  # First 4 combinations
    
    aci_results = []
    for combo in aci_combinations:
        factors = combo.factors
        
        # Calculate factored load manually for demonstration
        if 'dead' in factors and 'live' in factors:
            factored = factors['dead'] * dead_load + factors['live'] * live_load
            if 'wind' in factors:
                factored += factors['wind'] * wind_load
        elif 'dead' in factors:
            factored = factors['dead'] * dead_load
        else:
            factored = 0
        
        aci_results.append(factored)
        print(f"  {combo.name}: {combo.get_equation()} = {factored:.1f} kN/m¬≤")
    
    # Thai Load Combinations
    print("\n2. Thai Ministry B.E. 2566 Load Combinations:")
    print("-" * 40)
    
    thai_loads = ThaiMinistryLoadCombinations()
    thai_combinations = thai_loads.get_ultimate_combinations()[:4]  # First 4 combinations
    
    thai_results = []
    for combo in thai_combinations:
        factors = combo.factors
        
        # Calculate factored load manually for demonstration
        if 'DL' in factors and 'LL' in factors:
            factored = factors['DL'] * dead_load + factors['LL'] * live_load
            if 'W' in factors:
                factored += abs(factors['W']) * wind_load  # Take absolute value
        elif 'DL' in factors:
            factored = factors['DL'] * dead_load
        else:
            factored = 0
        
        thai_results.append(factored)
        print(f"  {combo.name}: {combo.get_equation()} = {factored:.1f} kN/m¬≤")
    
    # Comparison of critical combinations
    print("\n3. Critical Combination Comparison:")
    print("-" * 40)
    
    aci_critical = max(aci_results)
    thai_critical = max(thai_results)
    
    print(f"ACI 318M-25 maximum: {aci_critical:.1f} kN/m¬≤")
    print(f"Thai B.E. 2566 maximum: {thai_critical:.1f} kN/m¬≤")
    
    difference = abs(aci_critical - thai_critical)
    percent_diff = difference / max(aci_critical, thai_critical) * 100
    
    print(f"Difference: {difference:.1f} kN/m¬≤ ({percent_diff:.1f}%)")
    
    if aci_critical > thai_critical:
        print("üîç ACI combinations are more conservative for this load case")
    elif thai_critical > aci_critical:
        print("üîç Thai combinations are more conservative for this load case")
    else:
        print("üîç Both standards give similar results")
    
    return {
        'aci_critical': aci_critical,
        'thai_critical': thai_critical,
        'difference_percent': percent_diff
    }


def compare_design_approaches():
    """Compare design approaches and philosophies"""
    print("\n\nüèóÔ∏è Design Approach Comparison")
    print("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö")
    print("=" * 60)
    
    print("1. Design Philosophy / ‡∏õ‡∏£‡∏±‡∏ä‡∏ç‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö:")
    print("-" * 40)
    
    print("ACI 318M-25:")
    print("  ‚úì Strength Design Method (Ultimate Strength)")
    print("  ‚úì Load and Resistance Factor Design (LRFD)")
    print("  ‚úì Strength reduction factors (œÜ factors)")
    print("  ‚úì International standard, widely adopted")
    
    print("\nThai Ministry Regulation B.E. 2566:")
    print("  ‚úì Follows international practices")
    print("  ‚úì Load and Resistance Factor Design (LRFD)")
    print("  ‚úì Strength reduction factors (œÜ factors)")
    print("  ‚úì Adapted for Thai construction practices")
    print("  ‚úì Considers local materials and conditions")
    
    print("\n2. Key Differences / ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å:")
    print("-" * 40)
    
    print("Material Specifications:")
    print("  ‚Ä¢ ACI: ASTM standards (Grade 420, Grade 520)")
    print("  ‚Ä¢ Thai: TIS standards (SD40, SD50, SR24)")
    
    print("\nUnit Systems:")
    print("  ‚Ä¢ ACI: Primarily SI units (MPa, mm)")
    print("  ‚Ä¢ Thai: Mixed SI and traditional (ksc, kgf)")
    
    print("\nLoad Classifications:")
    print("  ‚Ä¢ ACI: D, L, W, E notation")
    print("  ‚Ä¢ Thai: DL, LL, W, E notation (similar)")
    
    print("\nEnvironmental Factors:")
    print("  ‚Ä¢ ACI: General climate considerations")
    print("  ‚Ä¢ Thai: Tropical climate, monsoon conditions")
    
    print("\n3. Practical Implications / ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥:")
    print("-" * 40)
    
    print("For International Projects:")
    print("  ‚úì ACI 318M-25 provides global consistency")
    print("  ‚úì Widely recognized by international consultants")
    print("  ‚úì Compatible with other international codes")
    
    print("\nFor Thai Projects:")
    print("  ‚úì Thai standards ensure regulatory compliance")
    print("  ‚úì Optimized for local materials and practices")
    print("  ‚úì Required for building permits in Thailand")
    print("  ‚úì Familiarity with local construction industry")


def design_comparison_example():
    """Practical design comparison example"""
    print("\n\nüìä Practical Design Comparison")
    print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á")
    print("=" * 60)
    
    # Common design scenario
    print("Design Scenario: Office Building Column")
    print("‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå: ‡πÄ‡∏™‡∏≤‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
    print("-" * 40)
    
    # Loads
    axial_dead = 200  # kN
    axial_live = 150  # kN
    moment = 25       # kN‚ãÖm
    
    print(f"Applied loads:")
    print(f"  Axial dead load = {axial_dead} kN")
    print(f"  Axial live load = {axial_live} kN")
    print(f"  Applied moment = {moment} kN‚ãÖm")
    
    # ACI factored loads
    aci_factored_axial = 1.4 * axial_dead + 1.7 * axial_live
    aci_factored_moment = 1.4 * moment  # Assuming moment from dead load
    
    # Thai factored loads (using combination 1001)
    thai_factored_axial = 1.4 * axial_dead + 1.7 * axial_live
    thai_factored_moment = 1.4 * moment
    
    print(f"\nFactored loads:")
    print(f"  ACI 318M-25:")
    print(f"    Pu = {aci_factored_axial:.0f} kN")
    print(f"    Mu = {aci_factored_moment:.0f} kN‚ãÖm")
    
    print(f"  Thai B.E. 2566:")
    print(f"    Pu = {thai_factored_axial:.0f} kN")
    print(f"    Mu = {thai_factored_moment:.0f} kN‚ãÖm")
    
    # Column capacity estimation (simplified)
    column_area = 400 * 400  # mm¬≤
    
    # ACI approach
    aci_materials = compare_materials()
    aci_fc = aci_materials['aci_concrete'].fc_prime
    aci_capacity_estimate = 0.8 * column_area * aci_fc / 1000  # kN (very simplified)
    
    # Thai approach
    thai_fc = aci_materials['thai_concrete'].fc_prime
    thai_capacity_estimate = 0.8 * column_area * thai_fc / 1000  # kN (very simplified)
    
    print(f"\nColumn capacity estimates (400√ó400 mm):")
    print(f"  ACI approach: ~{aci_capacity_estimate:.0f} kN")
    print(f"  Thai approach: ~{thai_capacity_estimate:.0f} kN")
    
    # Utilization ratios
    aci_utilization = aci_factored_axial / aci_capacity_estimate
    thai_utilization = thai_factored_axial / thai_capacity_estimate
    
    print(f"\nUtilization ratios:")
    print(f"  ACI: {aci_utilization:.2f}")
    print(f"  Thai: {thai_utilization:.2f}")
    
    return {
        'aci_utilization': aci_utilization,
        'thai_utilization': thai_utilization,
        'load_difference': abs(aci_factored_axial - thai_factored_axial)
    }


def main():
    """Main comparison function"""
    print("üîç Comprehensive Standards Comparison")
    print("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°")
    print("=" * 80)
    
    # Run all comparisons
    materials = compare_materials()
    loads = compare_load_combinations()
    compare_design_approaches()
    design = design_comparison_example()
    
    # Final summary
    print("\n\nüìã Summary / ‡∏™‡∏£‡∏∏‡∏õ")
    print("=" * 60)
    
    print("Material Compatibility:")
    if materials['aci_steel'].fy - materials['thai_steel'].fy < 50:
        print("  ‚úÖ Steel grades are closely compatible")
    else:
        print("  ‚ö†Ô∏è  Steel grades show significant difference")
    
    print("Load Combination Similarity:")
    if loads['difference_percent'] < 10:
        print("  ‚úÖ Load combinations give similar results")
    else:
        print("  ‚ö†Ô∏è  Load combinations show significant difference")
    
    print("Design Approach:")
    print("  ‚úÖ Both use LRFD methodology")
    print("  ‚úÖ Both use strength reduction factors")
    print("  ‚úÖ Both suitable for modern design")
    
    print("\nRecommendations / ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    print("  ‚Ä¢ Use ACI 318M-25 for international projects")
    print("  ‚Ä¢ Use Thai standards for local Thai projects")
    print("  ‚Ä¢ Both standards ensure safe, economical design")
    print("  ‚Ä¢ Consider project requirements and local regulations")
    
    return {
        'materials_compatible': True,
        'loads_similar': loads['difference_percent'] < 10,
        'both_suitable': True
    }


if __name__ == "__main__":
    # Run the comparison
    result = main()
    
    print("\n" + "=" * 80)
    print("Standards Comparison Completed!")
    print("‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    print("=" * 80)
    
    if result['materials_compatible'] and result['loads_similar']:
        print("‚úÖ Both standards are highly compatible for most applications")
        print("‚úÖ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà")
    
    print("\nBoth ACI 318M-25 and Thai Ministry Regulation B.E. 2566")
    print("provide reliable, safe structural design methods.")
    print("‡∏ó‡∏±‡πâ‡∏á ACI 318M-25 ‡πÅ‡∏•‡∏∞‡∏Å‡∏é‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á ‡∏û.‡∏®. 2566")
    print("‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")